#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  #!/usr/bin/env bash

  # Setup arguments
  smtp_host=smtps://${args[smtp_host]}
  smtp_credentials=${args[smtp_credentials]}
  from_email=${args[from_email]}
  to_email=${args[to_email]}

  # Get stats from pi-hole
  pi_hole_host=127.0.0.1
  pi_hole_port=4711
  command='>stats'
  stats=$(echo $command | nc $pi_hole_host $pi_hole_port -w 1)

  # Create email
  printf -v date '%(%Y-%m-%d)T\n' -1 # current date
  email=$(cat <<EOM
From: ${from_email}
To: ${to_email}
Subject: pi-hole stats ${date}

${stats}
EOM
  )

  # Send email
  curl --silent --url $smtp_host --ssl-reqd \
      --mail-from $from_email --mail-rcpt $to_email \
      --user $smtp_credentials \
      --upload-file <(echo "$email")
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
pi_hole_stats_email_usage() {
  if [[ -n $long_usage ]]; then
    printf "pi-hole-stats-email - Send pi-hole stats via email\n"
    echo

  else
    printf "pi-hole-stats-email - Send pi-hole stats via email\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pi-hole-stats-email SMTP_HOST SMTP_CREDENTIALS FROM_EMAIL TO_EMAIL\n"
  printf "  pi-hole-stats-email --help | -h\n"
  printf "  pi-hole-stats-email --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SMTP_HOST"
    printf "    SMTP Host and Port (e.g. smtp.mailserver.com:465)\n"
    echo

    # :argument.usage
    printf "  %s\n" "SMTP_CREDENTIALS"
    printf "    SMTP Credentials for Login (e.g. username:password)\n"
    echo

    # :argument.usage
    printf "  %s\n" "FROM_EMAIL"
    printf "    Email address to send as (e.g. from@mailserver.com)\n"
    echo

    # :argument.usage
    printf "  %s\n" "TO_EMAIL"
    printf "    Email address for delivery (e.g. to@mailserver.com)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  pi-hole-stats-email smtp.mailserver.com:465 username:password\n  from@mailserver.com to@mailserver.com\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        pi_hole_stats_email_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['smtp_host']+x} ]]; then
          args['smtp_host']=$1
          shift
        # :argument.case
        elif [[ -z ${args['smtp_credentials']+x} ]]; then
          args['smtp_credentials']=$1
          shift
        # :argument.case
        elif [[ -z ${args['from_email']+x} ]]; then
          args['from_email']=$1
          shift
        # :argument.case
        elif [[ -z ${args['to_email']+x} ]]; then
          args['to_email']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['smtp_host']+x} ]]; then
    printf "missing required argument: SMTP_HOST\nusage: pi-hole-stats-email SMTP_HOST SMTP_CREDENTIALS FROM_EMAIL TO_EMAIL\n" >&2
    exit 1
  fi
  if [[ -z ${args['smtp_credentials']+x} ]]; then
    printf "missing required argument: SMTP_CREDENTIALS\nusage: pi-hole-stats-email SMTP_HOST SMTP_CREDENTIALS FROM_EMAIL TO_EMAIL\n" >&2
    exit 1
  fi
  if [[ -z ${args['from_email']+x} ]]; then
    printf "missing required argument: FROM_EMAIL\nusage: pi-hole-stats-email SMTP_HOST SMTP_CREDENTIALS FROM_EMAIL TO_EMAIL\n" >&2
    exit 1
  fi
  if [[ -z ${args['to_email']+x} ]]; then
    printf "missing required argument: TO_EMAIL\nusage: pi-hole-stats-email SMTP_HOST SMTP_CREDENTIALS FROM_EMAIL TO_EMAIL\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
